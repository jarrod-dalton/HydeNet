rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 10)
Post$futime
median(Post$futime)
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 10)
median(Post$futime)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 1))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 1))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 1))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 1))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 1)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 1))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 1,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 1, rx = 2))
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::test("C:/Users/Nutter/Documents/GitHub/HydeNet")
# devtools::check("C:/Users/Nutter/Documents/GitHub/HydeNet", args = "--as-cran")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::test("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net, pretty = TRUE)
Net <- HydeNetwork(~ futime | ecog.ps * rx,
data = ovarian) %>%
setNode(futime,
nodeType = "dnorm",
nodeFormula = Surv(futime, fustat) ~ ecog.ps + rx,
fitterArgs = list(dist = "weibull", scale = 1),
nodeFitter = "survreg",
mu = fromData(),
tau = fromData()) %>%
setNode(ecog.ps,
nodeType = "dcat",
nodeFormula = ~ ecog.ps,
nodeFitter = "xtabs",
pi = fromData()) %>%
setNode(rx,
nodeType = "dcat",
nodeFormula = ~ rx,
nodeFitter = "xtabs",
pi = fromData())
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2))
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 2, rx = 2))
Net <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
Net <- HydeNetwork(~ futime | ecog.ps * rx,
data = ovarian) %>%
setNode(futime,
nodeType = "dnorm",
nodeFormula = Surv(futime, fustat) ~ ecog.ps + rx,
fitterArgs = list(dist = "weibull", scale = 1),
nodeFitter = "survreg",
mu = fromData(),
tau = fromData()) %>%
setNode(ecog.ps,
nodeType = "dcat",
nodeFormula = ~ ecog.ps,
nodeFitter = "xtabs",
pi = fromData()) %>%
setNode(rx,
nodeType = "dcat",
nodeFormula = ~ rx,
nodeFitter = "xtabs",
pi = fromData())
identical(Net, Net.bag)
Net
Net.bag
network = Net.bag
lapply(network$nodes, function(x) writeJagsModel(network, x))
lapply(network$nodes, function(x) HydeNet:::writeJagsModel(network, x))
network$nodes
model <- lapply(network$nodes[1], function(x) HydeNet:::writeJagsModel(network, x))
model <- lapply(network$nodes[2], function(x) HydeNet:::writeJagsModel(network, x))
model <- lapply(network$nodes[2:3], function(x) HydeNet:::writeJagsModel(network, x))
model <- lapply(network$nodes[1], function(x) HydeNet:::writeJagsModel(network, x))
model = fit
model
("data" %in% names(as.list(model$call)[-c(1, which(names(as.list(model$call)) == "formula"))]))
(is.null(model$model))
stats::update(model, model=TRUE)$model
Net.bag$nodeData
Net.bag$nodeData[["futime"]]
Net.bag$nodeData[["futime"]][1]
names(Net.bag$nodeData[["futime"]])
node_str = "futime"
node_params = c("mu" = fromData(), "tau" = fromData())
do.call(what = network[["nodeFitter"]][[node_str]],
args = c(list(formula = network[["nodeFormula"]][[node_str]],
data = if (is.null(network[["nodeData"]][[node_str]]))
network[["data"]]
else
network[["nodeData"]][[node_str]]),
network[["nodeFitterArgs"]][[node_str]]))
model.frame(fit)
model.frame(fit)[1]
unclass(model.frame(fit)[1])
model.frame(fit)[1][1]
model.frame(fit)[[1]]
model.frame(fit)[[1]][1]
class(model.frame(fit)[[1]])
model.frame(fit)[[1]]
as.matrix(model.frame(fit)[[1]])
as.data.frame(model.frame(fit)[[1]])
as.matrix(model.frame(fit)[[1]])
19.22/69
19.22/69*60
cbind(as.matrix(model.frame(fit)[[1]]),
model.frame(fit[[-1]]))
fit
as.matrix(model.frame(fit)[[1]])
model.frame(fit)
model.frame(fit)[, -1]
cbind(as.matrix(model.frame(fit)[[1]]),
model.frame(fit)[, -1])
1/0.658
cbind(as.matrix(model.frame(fit)[[1]]),
model.frame(fit)[, -1])
DF <- cbind(as.data.frame(as.matrix(model.frame(fit)[[1]])),
model.frame(fit)[, -1])
DF
class(DF)
names(model.frame(fit))
names(model.frame(fit))[1]
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1])
?strsplit
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1]) %>%
strsplit(", ")
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1]) %>%
strsplit(", ") %>%
unlist()
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1]) %>%
strsplit(", ") %>%
unlist() %>%
c(names(model.frame(fit))[-1])
cbind(as.data.frame(as.matrix(model.frame(fit)[[1]])),
model.frame(fit)[, -1]) %>%
setNames(
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1]) %>%
strsplit(", ") %>%
unlist() %>%
c(names(model.frame(fit))[-1])
)
survreg_data <- function(fit)
{
cbind(as.data.frame(as.matrix(model.frame(fit)[[1]])),
model.frame(fit)[, -1]) %>%
setNames(
gsub("(Surv[(]|[)])", "", names(model.frame(fit))[1]) %>%
strsplit(", ") %>%
unlist() %>%
c(names(model.frame(fit))[-1])
)
}
survreg_data(fit)
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
model <- lapply(network$nodes, function(x) HydeNet:::writeJagsModel(network, x))
model <- lapply(network$nodes[1], function(x) HydeNet:::writeJagsModel(network, x))
Net.bag$nodeData
network = Net.bag
node_str = "futime"
node_params <- network[["nodeParams"]][[node_str]]
(fromData() %in% node_params)
(node_params["mu"] == fromData())
node_params["mu"] <-
as.character(
as.formula(
node_params[["mu"]]
)
)[-(1:2)]
node_params[["mu"]]
as.formula(
node_params[["mu"]]
)
Net
Net.bag
Net <- HydeNetwork(~ futime | ecog.ps * rx,
data = ovarian) %>%
setNode(futime,
nodeType = "dnorm",
nodeFormula = Surv(futime, fustat) ~ ecog.ps + rx,
fitterArgs = list(dist = "weibull", scale = 1),
nodeFitter = "survreg",
mu = fromData(),
tau = fromData())
Net
Net.bag
?"HydeNetwork"
#* Model Input
g1 <- lm(wells ~ 1, data=PE)
g2 <- glm(pe ~ wells, data=PE, family="binomial")
g3 <- lm(d.dimer ~ pe + pregnant, data=PE)
g4 <- xtabs(~ pregnant, data=PE)
g5 <- glm(angio ~ pe, data=PE, family="binomial")
g6 <- glm(treat ~ d.dimer + angio, data=PE, family="binomial")
g7 <- glm(death ~ pe + treat, data=PE, family="binomial")
bagOfModels <- list(g1,g2,g3,g4,g5,g6,g7)
bagNet <- HydeNetwork(bagOfModels)
print(bagNet)
Net.bag
as.formula(ilogit(0.5757*wells + -3.90355))
as.formula("ilogit(0.5757*wells + -3.90355)")
node_params[["mu"]]
fit <- do.call(what = network[["nodeFitter"]][[node_str]],
args = c(list(formula = network[["nodeFormula"]][[node_str]],
data = if (is.null(network[["nodeData"]][[node_str]]))
network[["data"]]
else
network[["nodeData"]][[node_str]]),
network[["nodeFitterArgs"]][[node_str]]))
writeJagsFormula(fit = fit,
nodes = network[["nodes"]])
node_params["mu"] == fromFormula()
writeJagsFormula(fit = fit,
nodes = network[["nodes"]])
node_params["mu"] <- writeJagsFormula(fit = fit,
nodes = network[["nodes"]])
(grepl("~", node_params["mu"]))
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
fit
node_tmp = "futime"
parents = c("ecog.ps", "rx")
survreg_tau(fit,
node_str = node_tmp,
parents = parents_tmp)[["tau"]])
survreg_tau(fit,
node_str = node_tmp,
parents = parents_tmp)
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
writeNetworkModel(Net.bag, pretty = TRUE)
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
lapply(network$nodes, function(x) writeJagsModel(network, x))
model <- lapply(network$nodes, function(x) HydeNet:::writeJagsModel(network, x))
model
node_str
node_params
node_params <- network[["nodeParams"]][[node_str]]
(fromData() %in% node_params)
(node_params["mu"] == fromData())
(node_params["mu"] == fromFormula())
(grepl("~", node_params["mu"]))
(node_params["tau"] %in% c(fromData(), fromFormula()))
sprintf("%s\n   %s ~ %s(%s,\n%s%s)",
if (is.null(network[["nodePrelim"]][[node_str]]))
surv_tau[["prelim"]]
else
network[["nodePrelim"]][[node_str]],
node_str,
network[["nodeType"]][[node_str]],
node_params[1],
paste0(rep(" ",
nchar(node_str) + nchar(network[["nodeType"]][[node_str]]) + 7),
collapse = ""),
node_params[2]
)
surv_tau <- NULL
sprintf("%s\n   %s ~ %s(%s,\n%s%s)",
if (is.null(network[["nodePrelim"]][[node_str]]))
surv_tau[["prelim"]]
else
network[["nodePrelim"]][[node_str]],
node_str,
network[["nodeType"]][[node_str]],
node_params[1],
paste0(rep(" ",
nchar(node_str) + nchar(network[["nodeType"]][[node_str]]) + 7),
collapse = ""),
node_params[2]
)
network[["nodePrelim"]][[node_str]]
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
Net.bag$nodePrelim
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
Net.bag$nodePrelim
survreg_tau(fit,
node_str = node_tmp,
parents = parents_tmp)[["prelim"]])
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
Net.bag$nodePrelim
writeNetworkModel(Net.bag, pretty = TRUE)
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
writeNetworkModel(Net.bag, pretty = TRUE)
devtools::test("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::install_local("C:/Users/Nutter/Documents/GitHub/HydeNet")
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2))
compileJagsModel(Net.bag,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
Net.bag <- HydeNetwork(list(fit,
xtabs(~ rx, data = ovarian),
xtabs(~ ecog.ps, data = ovarian)))
writeNetworkModel(Net.bag, pretty = TRUE)
Post <-
compileJagsModel(Net.bag) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
Post
1/3 ^ 10
1/3^11
Post <-
compileJagsModel(Net.bag) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 2000)
library(ggplot2)
ggplot(Post,
aes(x = factor(rx),
y = futime)) +
geom_boxplot()
ggplot(Post,
aes(x = factor(rx),
y = futime)) +
geom_boxplot() +
facet_grid(~ ecog.ps)
ggplot(Post,
aes(x = factor(rx),
y = futime)) +
geom_boxplot() +
facet_grid(ecog.ps ~ .)
Post <-
compileJagsModel(Net.bag) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 100)
library(ggplot2)
ggplot(Post,
aes(x = factor(rx),
y = futime)) +
geom_boxplot() +
facet_grid(~ ecog.ps)
devtools::document("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::test("C:/Users/Nutter/Documents/GitHub/HydeNet")
data(PE, package='HydeNet')
Net <- HydeNetwork(~ wells
+ pe | wells
+ d.dimer | pregnant*pe
+ angio | pe
+ treat | d.dimer*angio
+ death | pe*treat,
data = PE)
names(Net)
g1 <- lm(wells ~ 1, data=PE)
g2 <- glm(pe ~ wells, data=PE, family="binomial")
g3 <- lm(d.dimer ~ pe + pregnant, data=PE)
g4 <- xtabs(~ pregnant, data=PE)
g5 <- cpt(angio ~ pe, data=PE)
g6 <- glm(treat ~ d.dimer + angio, data=PE, family="binomial")
g7 <- cpt(death ~ pe + treat, data=PE)
bagOfModels <- list(g1,g2,g3,g4,g5,g6,g7)
bagNet <- HydeNetwork(bagOfModels)
names(bagNet)
devtools::test("C:/Users/Nutter/Documents/GitHub/HydeNet")
devtools::check("C:/Users/Nutter/Documents/GitHub/HydeNet", args = "--as-cran")
devtools::check("C:/Users/Nutter/Documents/GitHub/HydeNet", args = "--as-cran")
Net <- HydeNetwork(~ futime | ecog.ps * rx,
data = ovarian) %>%
setNode(futime,
nodeType = "dnorm",
nodeFormula = Surv(futime, fustat) ~ ecog.ps + rx,
fitterArgs = list(dist = "weibull", scale = 1),
nodeFitter = "survreg",
mu = fromData(),
tau = fromData()) %>%
setNode(ecog.ps,
nodeType = "dcat",
nodeFormula = ~ ecog.ps,
nodeFitter = "xtabs",
pi = fromData()) %>%
setNode(rx,
nodeType = "dcat",
nodeFormula = ~ rx,
nodeFitter = "xtabs",
pi = fromData())
plot(Net)
Post <-
compileJagsModel(Net) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 2, rx = 2))
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 2, rx = 2))
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2))
library(survival)
Post <-
compileJagsModel(Net,
data = list(ecog.ps = 2,
rx = 2)) %>%
HydePosterior(c("ecog.ps", "rx", "futime"),
n.iter = 1000)
median(Post$futime)
predict(fit, newdata = data.frame(ecog.ps = 2, rx = 2))
writeNetworkModel(Net, TRUE)
130*40
install.packages("HydeNet")
install.packages("HydeNet")
install.packages("HydeNet")
install.packages("HydeNet")
rm(list = ls())
