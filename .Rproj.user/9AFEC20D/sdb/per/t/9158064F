{
    "contents" : "#' @name plot.HydeNetwork\n#' @aliases plot.HydeNetwork plotHydeNetwork\n#' @export \n#' @importFrom DiagrammeR create_edges\n#' @importFrom DiagrammeR create_graph\n#' @importFrom DiagrammeR render_graph\n#' @importFrom dplyr bind_rows\n#' @importFrom dplyr filter\n#' @importFrom dplyr left_join\n#' @importFrom dplyr mutate\n#' @importFrom dplyr select\n#' @method plot HydeNetwork\n#' \n#' \n#' @title Plotting Utilities Probabilistic Graphical Network\n#' @details Generate and customize plots of a \\code{HydeNetwork} \n#'   class network. \\code{HydeNet} provides some initial defaults for standard \n#'   variable nodes, deterministic nodes, decision nodes, and utility nodes.\n#'   Since these nodes are assumed to be of inherent difference and interest, \n#'   the options are defined in a way to make these easier to identify in \n#'   a plot.  The default options may be altered by the user to their liking\n#'   by invoking \\code{HydePlotOptions}.  Node attributes are more fully \n#'   explained in the documentation for the \\code{DiagrammeR} package.  \n#'   Individual nodes may be define with \\code{customNode}.\n#' \n#' @param x an object of class \\code{HydeNetwork}\n#' @param customNodes a data frame giving additional specifications for nodes.\n#'   The customizations provided here will override the default settings.\n#' @param customEdges a data frame giving custom settings for edges (arrows)\n#'   between nodes.\n#' @param ... for the \\code{plot} method, additional arguments to be passed to \n#'   \\code{DiagrammeR::render_graph}.  For \\code{customNode}, \n#'   named node attributes to assign to a node's plotting characteristics.\n#' @param useHydeDefaults A logical value indicating if the default plot\n#'   parameters in \\code{options(\"Hyde_plotOptions\")} should be applied\n#'   to the plot.\n#' \n#' @details GraphViz is an enormous set of resources for customizing and we \n#'   cannot adequately describe them all here.  See 'Sources' for links \n#'   to additional documentation from the \\code{DiagrammeR} package and the \n#'   GraphViz website.\n#'   \n#'   With its default settings, \\code{HydeNet} makes use of five node \n#'   attributes for plotting networks.  These are \n#'   \\itemize{\n#'     \\item style: By default, set to 'filled', but may also take 'striped',\n#'       'wedged', or 'radial'.\n#'     \\item fillcolor: The hexadecimal or X11 color name.  In styles 'striped',\n#'       'wedged', or 'radial', this may take multiple colors separated by a \n#'       colon (:).\n#'     \\item shape: the node shape.  May take the values 'oval', 'diamond',\n#'       'egg', 'ellipse', 'square', 'triangle', or 'rect'\n#'     \\item fontcolor: The color of the node label.\n#'     \\item color: The color of the node's border.\n#'    }\n#'    \n#'   \\code{HydeNet} assumes the GraphViz defaults for edge nodes (arrows).\n#'   \n#'   See the Plotting Hyde Networks vignette (\\code{vignette(\"HydeNetPlots\")})\n#'   for a more thorough explanation of plotting networks.  \n#' \n#' @author Jarrod Dalton and Benjamin Nutter\n#'   \n#' @source \n#'   \\url{http://rich-iannone.github.io/DiagrammeR/graphviz.html}\\cr\n#'   See especially the section on Attributes\n#'   \n#'   \\url{http://graphviz.org/}\\cr\n#'   \\url{http://graphviz.org/content/attrs}\n#' \n#' @examples\n#' \\dontrun{\n#' #* Plots may open in a browser.\n#' data(BlackJack, package=\"HydeNet\")\n#' plot(BlackJack)\n#'\n#' HydePlotOptions(variable=list(shape = \"rect\", fillcolor = \"#A6DBA0\"),\n#'                 determ = list(shape = \"rect\", fillcolor = \"#E7D4E8\",\n#'                               fontcolor = \"#1B7837\", linecolor = \"#1B7837\"),\n#'                 decision = list(shape = \"triangle\", fillcolor = \"#1B7837\",\n#'                                 linecolor = \"white\"),\n#'                 utility = list(shape = \"circle\", fillcolor = \"#762A83\", \n#'                                fontcolor = \"white\"))\n#' plot(BlackJack)\n#' \n#' HydePlotOptions(restorePackageDefaults = TRUE)\n#' \n#' plot(BlackJack,\n#'      customNodes = customNode(payoff, \n#'                               fillcolor = \"purple\", shape = \"circle\", \n#'                               fontcolor = \"white\", height = \"2\",\n#'                               style=\"filled\"))\n#' plot(BlackJack,\n#'   customNodes = \n#'     dplyr::bind_rows(\n#'       customNode(pointsAfterCard3,\n#'                  shape = \"circle\",\n#'                  style = \"radial\",\n#'                  fillcolor = \"#1B7837:#762A83\",\n#'                  fontcolor = \"black\",\n#'                  height = \"2\"),\n#'       customNode(playerFinalPoints,\n#'                  shape = \"circle\",\n#'                  style = \"wedged\",\n#'                  height = \"3\",\n#'                  fillcolor = c(\"red:orange:yellow:green:blue:purple\"))))\n#' }\n\n\nplot.HydeNetwork <- function(x, \n                             customNodes = NULL,\n                             customEdges = NULL,\n                             ..., \n                             useHydeDefaults = TRUE)\n{\n  node_df <- data.frame(nodes = x$nodes,\n                        stringsAsFactors = FALSE)\n  if (useHydeDefaults) node_df <- mergeDefaultPlotOpts(x, node_df)\n  \n  if (!is.null(customNodes)) node_df <- mergeCustomNodes(node_df, customNodes)\n\n  edge_table <- do.call(\"rbind\", mapply(mapEdges, x$nodes, x$parents))\n  \n  edge_df <- DiagrammeR::create_edges(from = edge_table[, 2], \n                                      to = edge_table[, 1])\n  \n  if (!is.null(customEdges)) mergeCustomEdges(edge_df, customEdges)\n\n  DiagrammeR::create_graph(nodes_df = as.data.frame(node_df),\n                             edges_df = edge_df) %>%\n    DiagrammeR::render_graph()\n  \n}\n\n#' rdname plot.HydeNetwork\n#' @param network a \\code{HydeNetwork} object\n#' @param node_df A data frame of node attributes.\n#' \nmergeDefaultPlotOpts <- function(network, node_df){\n  nodes <- network$nodes\n  node_df <- node_df %>%\n    dplyr::mutate(type = ifelse(network$nodeUtility[nodes], \n                                \"utility\",\n                                ifelse(network$nodeDecision[nodes], \n                                       \"decision\",\n                                       ifelse(network$nodeType[nodes] == \"determ\", \n                                              \"determ\",\n                                              \"variable\"))))\n\n  node_df <- dplyr::left_join(node_df, getOption(\"Hyde_plotOptions\"),\n                   by=\"type\") %>%\n    dplyr::select_(\"-type\")\n  \n  node_df[, -which(names(node_df) == \"nodes\")] <- \n    lapply(node_df[, -which(names(node_df) == \"nodes\"), drop=FALSE],\n           function(x) ifelse(is.na(x), \"\", x))\n  node_df\n}\n\n#' @rdname plot.HydeNetwork\n#' @param node_df A data frame of node attributes\n#' \nmergeCustomNodes <- function(node_df, customNodes)\n{\n#   node_df <- dplyr::mutate(node_df, index=2)\n#   customNodes <- dplyr::mutate(customNodes, index=1)\n  node_df <- dplyr::full_join(customNodes, node_df,\n                              by = c(\"nodes\" = \"nodes\"))\n  \n  duplicated_names.x <- names(node_df)[grepl(\"[.]x\", names(node_df))]\n  if (length(duplicated_names.x) > 0)\n  {\n    duplicated_names.y <- gsub(\"[.]x\", \".y\", duplicated_names.x)\n    for(i in 1:length(duplicated_names.y))\n    {\n      node_df[[duplicated_names.x[i]]] <- ifelse(is.na(node_df[[duplicated_names.x[i]]]),\n                                                 node_df[[duplicated_names.y[i]]],\n                                                 node_df[[duplicated_names.x[i]]])\n    }\n  }\n  \n  \n  if (any(grepl(\"[.]y\", names(node_df))))\n    node_df <- dplyr::select_(node_df, \"-ends_with('.y')\")\n\n  names(node_df) <- gsub(\"[.]x\", \"\", names(node_df))\n\n  node_df[, -which(names(node_df) == \"nodes\")] <- \n    lapply(node_df[, -which(names(node_df) == \"nodes\")],\n           function(x) ifelse(is.na(x), \"\", x))\n  return(node_df)\n}\n\n#' @rdname plot.HydeNetwork\n#' @param n node names from a network object\n#' @param p the list of parents from a network object\nmapEdges <- function(n, p) cbind(rep(n, length(p)),\n                                 p)\n\n#' @rdname plot.HydeNetwork\n#' @param edge_df The default edge attribute data frame\n#' \nmergeCustomEdges <- function(edge_df, customEdges)\n{\n  edge_df <- dplyr::mutate(edge_df, index = 2)\n  customEdges <- dplyr::mutate(customEdges, index = 1)\n  edge_df <- dplyr::bind_rows(customEdges, edge_df) %>%\n    dplyr::group_by_(\"from\", \"to\")  %>%\n    dplyr::filter_(\"rank(index, ties.method='first')==1\") %>%\n    dplyr::select_(\"-index\")\n  edge_df  \n}\n\n#' @rdname plot.HydeNetwork \n#' @export customNode\n#' @param node_id The name of a node in a \\code{HydeNetwork} object.\n#'   May be quoted or unquoted.\n#'   \ncustomNode <- function(node_id, ...){\n  node_id <- as.character(substitute(node_id))\n  nodeAttrs <- as.data.frame(c(list(nodes = node_id),\n                               list(...)), \n                             stringsAsFactors=FALSE)\n  if (length(nodeAttrs) > 0) return(nodeAttrs)\n}\n\n#' @rdname plot.HydeNetwork\n#' @export HydePlotOptions\n#' @param variable,determ,decision,utility Named lists of attributes to use as \n#'   defaults node attribute settings for each variable type.\n#' @param restorePackageDefaults A logical value.  When TRUE, the original \n#'   package defaults are restored.\nHydePlotOptions <- function(variable = NULL,\n                            determ = NULL,\n                            decision = NULL,\n                            utility = NULL, \n                            restorePackageDefaults = FALSE){\n  if (restorePackageDefaults)\n    options(Hyde_plotOptions = \n              data.frame(type = c(\"variable\", \"determ\", \"decision\", \"utility\"),\n                         fillcolor = c(\"white\", \"white\", \"#6BAED6\", \"#FFFFB2\"),\n                         shape = c(\"ellipse\", \"ellipse\", \"rect\", \"rect\"),\n                         fontcolor = c(\"black\", \"gray70\", \"black\", \"black\"),\n                         color = c(\"black\", \"gray70\", \"black\", \"black\"),\n                         style = c(\"filled\", \"filled\", \"filled\", \"filled\"),\n                         stringsAsFactors=FALSE))\n  else {\n    current_options <- getOption(\"Hyde_plotOptions\")\n    \n    new_options <- dplyr::bind_rows(\n                           lapply(list(variable, determ, decision, utility),\n                                  as.data.frame,\n                                  stringsAsFactors=FALSE))\n    new_options$type <- c(if (is.null(variable)) NULL else \"variable\", \n                          if (is.null(determ)) NULL else \"determ\", \n                          if (is.null(decision)) NULL else \"decision\", \n                          if (is.null(utility)) NULL else \"utility\")\n    \n    new_options <- dplyr::full_join(new_options, current_options,\n                                    by = c(\"type\" = \"type\"))\n    shared_names <- names(new_options)[grepl(\"[.]x\", names(new_options))]\n    if (length(shared_names) > 0)\n    {\n      for (s in shared_names)\n      {\n        new_options[, s] <- \n          mapply(function(x, y) ifelse(is.na(x), \n                                       y, \n                                       x),\n                 new_options[s],\n                 new_options[gsub(\"[.]x\", \".y\", s)])\n      }\n      new_options <- dplyr::select_(new_options, \"-ends_with('.y')\")                                      \n    }\n    \n    names(new_options) <- gsub(\"[.]x\", \"\", names(new_options))\n    \n    new_options[, which(names(new_options) == \"type\")] <- \n      lapply(new_options[, which(names(new_options) == \"type\"), drop=FALSE],\n             function(x) ifelse(is.na(x), \"\", x))\n    \n    options(Hyde_plotOptions = new_options)\n  }\n}\n",
    "created" : 1444394260295.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1141380083",
    "id" : "9158064F",
    "lastKnownWriteTime" : 1444394836,
    "path" : "~/GitHub/HydeNet/R/plot.HydeNetwork.R",
    "project_path" : "R/plot.HydeNetwork.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}