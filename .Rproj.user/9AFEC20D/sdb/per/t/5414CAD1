{
    "contents" : "#' @name compileJagsModel\n#' @export compileJagsModel\n#' @import rjags\n#' \n#' @title Compile Jags Model from a Hyde Network\n#' @description Generates the JAGS code from the Hyde network and uses it to \n#'   create an object representing a Bayesian graphical model.\n#'   \n#' @param network An object of class \\code{HydeNetwork}\n#' @param data A list of data values to be observed in the nodes.  It is\n#'   passed to the \\code{data} argument of \\code{rjags::jags}.  Alternatively,\n#'   a data frame representing a policy matrix may be provided to compile\n#'   multiple JAGS models.\n#' @param ... Additional arguments to be passed to \\code{jags.model}\n#' \n#' @details \\code{compileJagsModel} is a partial wrapper for \n#'   \\code{jags.model}. Running \\code{compileJagsModel(network)} is \n#'   equivalent to running \\code{jags.model(textConnection(writeNetworkModel(network)))}.\n#'   \n#' @return Returns a \\code{compiledHydeNetwork} object.  The \\code{jags} element\n#'   of this object is suitable to pass to \\code{coda.samples}.  Otherwise, \n#'   the primary function of the object is plotting the network with \n#'   observed data shown.   \n#'   \n#' @author Benjamin Nutter\n#' @seealso \\code{jags.model} \n#' \n#' @examples\n#' data(PE, package=\"HydeNet\")\n#' Net <- HydeNetwork(~ wells + \n#'                      pe | wells + \n#'                      d.dimer | pregnant*pe + \n#'                      angio | pe + \n#'                      treat | d.dimer*angio + \n#'                      death | pe*treat,\n#'                      data = PE) \n#'   \n#'                  \n#' compiledNet <- compileJagsModel(Net, n.chains=5)\n#' \n#' #* Generate the posterior distribution\n#' Posterior <- HydePosterior(compiledNet, \n#'                            variable.names = c(\"d.dimer\", \"death\"), \n#'                            n.iter = 1000)\n#' Posterior\n#' \n#' #* For a single model (ie, not a decision model), the user may choose to \n#' #* use the \\code{rjags} function \\code{coda.samples}.\n#' #* However, this does not have a succinct print method\n#' s <- coda.samples(compiledNet$jags, \n#'                   variable.names = c(\"d.dimer\", \"death\"), \n#'                   n.iter=1000)\n#'                 \n\ncompileJagsModel <- function(network, data=NULL, ...){\n  \n  factorRef <- makeFactorRef(network)\n  \n  #* convert label to value\n  data <- convertLabelToValue(data, factorRef)\n\n  cpt_arrays <- makeCptArrays(network) #* The utilty function is in the \n                                       #* file for compileDecisionModel\n \n  jags <- rjags::jags.model(textConnection(writeNetworkModel(network)), \n                    data = if (is.null(data) & length(cpt_arrays) == 0) sys.frame(sys.parent()) \n                             else c(data, cpt_arrays), ...)\n  \n  #* cHN for compiled Hyde Network\n  cHN <- list(jags=jags, observed=data, dag=network$dag, factorRef=factorRef)\n  \n  class(cHN) <- c(\"compiledHydeNetwork\")\n  cHN\n}\n\n\n\n\n#****** UTILITY FUNCTIONS\nconvertLabelToValue <- function(data, factorRef){\n  msg <- \"\"\n  for (i in names(data)){\n    if (!is.numeric(data[[i]]))\n    {\n      if (!i %in% names(factorRef)){\n        msg <- c(msg,\n                 paste0(\"'\", i, \"' was not numeric and no matching factor could be found in the data.\"))\n      }\n      else if (!all(data[[i]] %in% factorRef[[i]]$label))\n      {\n        msg <- c(msg,\n                 paste0(\"Values observed in '\", i, \"' must be one of \",\n                        paste0(c(factorRef[[i]]$label, factorRef[[i]]$value), collapse = \", \")))\n      }\n      else data[[i]] <- factorRef[[i]]$value[which(factorRef[[i]]$label == data[[i]])]\n    }\n  }\n\n  if (length(msg) > 1) stop(paste(msg, collapse=\"\\n\"))\n  return(data)\n}",
    "created" : 1444395464837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2656183900",
    "id" : "5414CAD1",
    "lastKnownWriteTime" : 1444394209,
    "path" : "~/GitHub/HydeNet/R/compileJagsModel.R",
    "project_path" : "R/compileJagsModel.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}