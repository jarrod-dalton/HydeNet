### 0.8.3 (2 May 2015)
* Implemented policy matrices into `compileDecisionModel` and fixed all the
  bugs that popped up in doing so.
* Changed the name of the Black Jack training data from `bjdata` to 
  `BlackJackTrain`.  Added documentation for it.
* Completed Documentation.

### 0.8.2 (1 May 2015)
* Adds functionality to customize plot defaults.
* Adds functionality to customize nodes in plots.
* Added the `BlackJack` data object, which contains a `HydeNetwork` object
  simulating a game of black jack.
* Included a vignette showing off the use of plotting methods.

### 0.8.1 (25 April 2015)
* Fixes Issue #10 dealing with utility nodes not being properly initialized 
  and set.

### 0.8.0 (24 April 2015)
* Added a new dependency on package `dplyr` and `magrittr`.  This was done to
  make `dplyr` available for joining MCMC matrices returned by `coda.samples`.
* Modified `compileJagsModel` to accommodate compiling multiple JAGS models when
  a policy/decision matrix is provided.
* Added the function `HydePosterior`, which generates posterior distributions
  of all of the JAGS models compiled by `HydePosterior`.
* Added a print function for the output of `HydePosterior`
* Added a function to bind all of the MCMC output from `HydePosterior` into
  a single data frame.
* Addressed a bug in `compileJagsModel` that affected observed data values. 
  (Issue #36 on GitHub).
* Addressed a bug in `modelToNode` that printed the node name in the first 
  parameter, causing `compileJagsModel` to fail. (Issue #35 on GitHub).

### 0.7.2 (10 April 2015)

* The primary additions to this developmental change are the addition of 
  decision nodes.  Each node now has a new descriptor (found in 
  `network$nodeDecision`.  It is a logical value indicating if the node should
  be considered a decision node.
* The behavior of decision nodes is exactly like all other nodes in every 
  respect _until_ you call the `compileDecisionNetwork` function.  
  `compileDecisionNetwork` evaluates all of the decision nodes, builds a table
  of all combinations of decision options, and systematically runs
  `compileJagsModel` for each row of that table to create a JAGS model for 
  each combination of decisions.
* Decision nodes can be defined in `setNode`, but for convenience, a new 
  function is introduced (`setDecisionNodes`) to allow multiple nodes to be 
  defined as decision nodes in one call.  This is intended for use when a list
  of models is used to define a network.
* Various bugs have been corrected that were uncovered while testing conditional
  logic nodes (this is not a formal feature of HydeNet, but can be done.  A 
  vignette describing their use will be built later)
* Additional bugs have been corrected while uncovered during the testing of 
  decision node features.
